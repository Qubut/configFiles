# Configuration for Alacritty, the GPU enhanced terminal emulator

# Any items in the `env` entry below will be added as
# environment variables. Some entries may override variables
# set by alacritty it self.
env:
  # TERM env customization. Default is xterm-256color
  # Note: the default TERM value `xterm-256color` does not
  # specify all features alacritty supports. This does pose
  # a few issues with programs relying on terminfo and the
  # `tput` command
  TERM: xterm-256color

# Window dimensions in character columns and lines
# (changes require restart)
dimensions:
  columns: 120
  lines: 60

# The FreeType rasterizer needs to know the device DPI for best results
# (changes require restart)
# dpi:
#   x: 90.0
#   y: 90.0
# When true, bold text is drawn using the bright variant of colors.
draw_bold_text_with_bright_colors: true

# Font configuration (changes require restart)
font:
  # The normal (roman) font face to use.
  normal:
    family: Source Code Pro Semibold
    # Style can be specified to pick a specific face.
    # style: Regular

  #  family: DejaVu Sans Mono
  # The bold font face
  bold:
    family: Source Code Pro
    # Style can be specified to pick a specific face.
    # style: Bold

  # The italic font face
  italic:
    family: Source Code Pro
    # Style can be specified to pick a specific face.
    # style: Italic

  # Point size of the font
  size: 13.0
  # Offset is the extra space around each character. offset.y can be thought of
  # as modifying the linespacing, and offset.x as modifying the letter spacing.
  # offset:
  #   x: 2
  #   y: -11
  # OS X only: use thin stroke font rendering. Thin strokes are suitable
  # for retina displays, but for non-retina you probably want this set to
  # false.
  use_thin_strokes: true

# Should display the render timer
render_timer: false

# Use custom cursor colors. If true, display the cursor in the cursor.foreground
# and cursor.background colors, otherwise invert the colors of the cursor.
#custom_cursor_colors: false
#
#Nightfly colorscheme
# Colors
# colors:
#   # Default colors
#   primary:
#     background:        '#011627'
#     foreground:        '#acb4c2'
#     bright_foreground: '#eeeeee'
#   # Cursor colors
#   cursor:
#     text:   '#080808'
#     cursor: '#9ca1aa'
#   # Selection colors
#   selection:
#     text:       '#080808'
#     background: '#b2ceee'
#   # Normal colors
#   normal:
#     black:   '#1d3b53'
#     red:     '#fc514e'
#     green:   '#a1cd5e'
#     yellow:  '#e3d18a'
#     blue:    '#82aaff'
#     magenta: '#c792ea'
#     cyan:    '#7fdbca'
#     white:   '#a1aab8'
#   # Bright colors
#   bright:
#     black:   '#7c8f8f'
#     red:     '#ff5874'
#     green:   '#21c7a8'
#     yellow:  '#ecc48d'
#     blue:    '#82aaff'
#     magenta: '#ae81ff'
#     cyan:    '#7fdbca'
#     white:   '#d6deeb'
window:
  opacity: 0.85
# Visual Bell
#
# Any time the BEL code is received, Alacritty "rings" the visual bell. Once
# rung, the terminal background will be set to white and transition back to the
# default background color. You can control the rate of this transition by
# setting the `duration` property (represented in milliseconds). You can also
# configure the transition function by setting the `animation` property.
#
# Possible values for `animation`
# `Ease`
# `EaseOut`
# `EaseOutSine`
# `EaseOutQuad`
# `EaseOutCubic`
# `EaseOutQuart`
# `EaseOutQuint`
# `EaseOutExpo`
# `EaseOutCirc`
# `Linear`
#
# To completely disable the visual bell, set its duration to 0.
#
bell:
  animation: EaseOutExpo
  duration: 0

# Key bindings
#
# Each binding is defined as an object with some properties. Most of the
# properties are optional. All of the alphabetical keys should have a letter for
# the `key` value such as `V`. Function keys are probably what you would expect
# as well (F1, F2, ..). The number keys above the main keyboard are encoded as
# `Key1`, `Key2`, etc. Keys on the number pad are encoded `Number1`, `Number2`,
# etc.  These all match the glutin::VirtualKeyCode variants.
#
# Possible values for `mods`
# `Command`, `Super` refer to the super/command/windows key
# `Control` for the control key
# `Shift` for the Shift key
# `Alt` and `Option` refer to alt/option
#
# mods may be combined with a `|`. For example, requiring control and shift
# looks like:
#
# mods: Control|Shift
#
# The parser is currently quite sensitive to whitespace and capitalization -
# capitalization must match exactly, and piped items must not have whitespace
# around them.
#
# Either an `action` or `chars` field must be present. `chars` writes the
# specified string every time that binding is activated. These should generally
# be escape sequences, but they can be configured to send arbitrary strings of
# bytes. Possible values of `action` include `Paste` and `PasteSelection`.
key_bindings:
  - { key: V, mods: Control|Shift, action: Paste }
  - { key: C, mods: Control|Shift, action: Copy }
  - { key: Q, mods: Control|Shift, action: Quit }
  - { key: W, mods: Control|Shift, action: Quit }
  - { key: Home, chars: "\eOH", mode: AppCursor }
  - { key: Home, chars: "\e[1~", mode: ~AppCursor }
  - { key: End, chars: "\eOF", mode: AppCursor }
  - { key: End, chars: "\e[4~", mode: ~AppCursor }
  - { key: PageUp, chars: "\e[5~" }
  - { key: PageDown, chars: "\e[6~" }
  - { key: Left, mods: Shift, chars: "\e[1;2D" }
  - { key: Left, mods: Control, chars: "\e[1;5D" }
  - { key: Left, mods: Alt, chars: "\e[1;3D" }
  - { key: Left, chars: "\e[D", mode: ~AppCursor }
  - { key: Left, chars: "\eOD", mode: AppCursor }
  - { key: Right, mods: Shift, chars: "\e[1;2C" }
  - { key: Right, mods: Control, chars: "\e[1;5C" }
  - { key: Right, mods: Alt, chars: "\e[1;3C" }
  - { key: Right, chars: "\e[C", mode: ~AppCursor }
  - { key: Right, chars: "\eOC", mode: AppCursor }
  - { key: Up, mods: Shift, chars: "\e[1;2A" }
  - { key: Up, mods: Control, chars: "\e[1;5A" }
  - { key: Up, mods: Alt, chars: "\e[1;3A" }
  - { key: Up, chars: "\e[A", mode: ~AppCursor }
  - { key: Up, chars: "\eOA", mode: AppCursor }
  - { key: Down, mods: Shift, chars: "\e[1;2B" }
  - { key: Down, mods: Control, chars: "\e[1;5B" }
  - { key: Down, mods: Alt, chars: "\e[1;3B" }
  - { key: Down, chars: "\e[B", mode: ~AppCursor }
  - { key: Down, chars: "\eOB", mode: AppCursor }
  - { key: Tab, mods: Shift, chars: "\e[Z" }
  - { key: F1, chars: "\eOP" }
  - { key: F2, chars: "\eOQ" }
  - { key: F3, chars: "\eOR" }
  - { key: F4, chars: "\eOS" }
  - { key: F5, chars: "\e[15~" }
  - { key: F6, chars: "\e[17~" }
  - { key: F7, chars: "\e[18~" }
  - { key: F8, chars: "\e[19~" }
  - { key: F9, chars: "\e[20~" }
  - { key: F10, chars: "\e[21~" }
  - { key: F11, chars: "\e[23~" }
  - { key: F12, chars: "\e[24~" }
  - { key: Back, chars: "" }
  - { key: Back, mods: Alt, chars: "\e" }
  - { key: Insert, chars: "\e[2~" }
  - { key: Delete, chars: "\e[3~", mode: AppKeypad }
  - { key: Delete, chars: "\e[P", mode: ~AppKeypad }

# Mouse bindings
#
# Currently doesn't support modifiers. Both the `mouse` and `action` fields must
# be specified.
#
# Values for `mouse`:
# - Middle
# - Left
# - Right
# - Numeric identifier such as `5`
#
# Values for `action`:
# - Paste
# - PasteSelection
# - Copy (TODO)
mouse_bindings:
  - { mouse: Middle, action: PasteSelection }

mouse:
  double_click: { threshold: 300 }
  triple_click: { threshold: 300 }

selection:
  semantic_escape_chars: ',â”‚`|:"'' ()[]{}<>'

hide_cursor_when_typing: false

# Shell
#
# You can set shell.program to the path of your favorite shell, e.g. /bin/fish.
# Entries in shell.args are passed unmodified as arguments to the shell.
#shell:
#  program: /bin/bash
#  args:
#    - --login
#Nord colorscheme
colors:
  name: vscode (dark)
  author: senpai-10
  primary:
    background: "#1E1E1E"
    foreground: "#D4D4D4"
  cursor:
    text: "#1d1f21"
    cursor: "#cccccc"
  normal:
    black: "#000000"
    red: "#cd3131"
    green: "#0dbc79"
    yellow: "#e5e510"
    blue: "#2472c8"
    magenta: "#bc3fbc"
    cyan: "#11a8cd"
    white: "#e5e5e5"
  bright:
    black: "#666666"
    red: "#f14c4c"
    green: "#23d18b"
    yellow: "#f5f543"
    blue: "#3b8eea"
    magenta: "#d670d6"
    cyan: "#29b8db"
    white: "#e5e5e5"
theme: vscode.dark
